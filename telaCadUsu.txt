import React, { useState, useEffect } from 'react';
import {ScrollView, Platform, Alert, Text, TextInput, View, TouchableOpacity, ActivityIndicator, Input, StatusBar } from 'react-native';
import { Picker } from '@react-native-picker/picker';
import Slider from '@react-native-community/slider';
import { RouteProp, useNavigation, useRoute } from '@react-navigation/core';
import { RectButton } from 'react-native-gesture-handler';
import { AntDesign, Ionicons } from '@expo/vector-icons';
import { styles } from './style';
import { Success } from '../../lotties/Success';
//import { TextInputMask } from 'react-native-masked-text';
//import DateTimePicker from '@react-native-community/datetimepicker';
//import { format } from 'date-fns';
import { showMessage, hideMessage } from "react-native-flash-message";
import Topo from '../topo/TopoCadUsu';



import AsyncStorage from '@react-native-async-storage/async-storage';

import api from '../../services/api';

 ParamList = {
    Detail: {
       id_reg: string,
        
    }
};




const CadUsuario= FC= () => {
    const navigation = any = useNavigation();

    const route = useRoute<RouteProp<ParamList; 'Detail';
    const id_reg = route?.params?.id_reg;
    
    const [nome, setNome] = useState('');
    const [email, setEmail] = useState('');
    const [senha, setSenha] = useState('');
    
  
       
    const [sucess, setSucess] = useState(false);
    const [edit, setEdit] = useState(false);
    const [loading, setLoading] = useState(false);


   
    async function saveData() {            
       
              
           if (nome == "" || email == "" || senha == "") {
            showMessage({
                message: "Erro ao Salvar",
                description: 'Preencha os Campos ObrigatÃ³rios!',
                type: "warning",
            });
            return;
        }

        try {
            const obj = {
                id: id_reg,
                nome: nome,               
                email: email,
                senha: senha

                
            }
     
            const res = await api.post('pam3etim/bd/usuarios/salvarUsu.php', obj);

            if (res.data.sucesso === false) {
                showMessage({
                    message: "Erro ao Salvar",
                    description: res.data.mensagem,
                    type: "warning",
                    duration: 3000,
                });

                return;
            }

            setSucess(true);
            showMessage({
                message: "Salvo com Sucesso",
                description: "Registro Salvo",
                type: "success",
                duration: 800,
            });
            navigation.push("Usuario")

        } catch (error) {
            Alert.alert("Ops", "Alguma coisa deu errado, tente novamente.");
            setSucess(false);
        }
    }



    

    async function loadData() {
        
        try {
            setLoading(true);
            if (id_reg != "0") {
                const res = await api.get(`apiModelo/usuarios/listar_idUsu.php?id=${id_reg}`);

                               
                setNome(res.data.dados.nome);
                setEmail(res.data.dados.email);
                setSenha(res.data.dados.senha);

               
                setEdit(false);
                
            } else {
                setEdit(true);
            }
        } catch (error) {
            console.log('Error ao carregar os Dados');
        }
    }

     
        
    useEffect(() => {
        loadData().then(() => setLoading(false))
    }, [])

    if (loading === true) {
        return (
            <View style={{ flex: 1, backgroundColor: '#fff' }}>
                <ActivityIndicator style={{ marginTop: 100 }} color="#000" size="large" />
            </View>
        )
    }

    if (sucess) {
        return <Success />
    }
    

    {
      

        <View style={styles.container}>
        <Topo></Topo>
        
        <StatusBar translucent hidden/>
  
        <View style={styles.form}>

        <TextInput
            secureTextEntry={true}
            style={[styles.login, styles.elevation]}
            placeholder="Nome"
            value={nome}
            onChangeText={ (nome) => setSenha(nome)}
          />

          <TextInput
            style={[styles.login, styles.elevation]}
            placeholder="Insira o seu Email"
            value={email}
            onChangeText={ (email) => setEmail(email)}
          />
  
  
          <TextInput
            secureTextEntry={true}
            style={[styles.login, styles.elevation]}
            placeholder="Insira a sua Senha"
            value={senha}
            onChangeText={ (senha) => setSenha(senha)}
          />

  
          <TouchableOpacity
            style={styles.loginSave}
            onPress={saveData}
          >
            <Text style={styles.text}>Cadastrar</Text>
          </TouchableOpacity>
  
        </View>
      </View>
    }
}
    
export default CadUsuario;